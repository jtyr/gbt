
# List of OS names and their icons
declare -A GBT__SYMBOLS
GBT__SYMBOLS[amzn]='\001\e[38;5;208m\002\xef\x94\xac'
GBT__SYMBOLS[android]='\001\e[38;5;113m\002\xef\x85\xbb'
GBT__SYMBOLS[arch]='\001\e[38;5;25m\002\xef\x8c\x83'
GBT__SYMBOLS[archarm]='\001\e[38;5;125m\002\xef\x8c\x83'
GBT__SYMBOLS[alpine]='\001\e[38;5;24m\002\xef\x8c\x80'
GBT__SYMBOLS[aosc]='\001\e[38;5;172m\002\xef\x8c\x81'
GBT__SYMBOLS[centos]='\001\e[38;5;27m\002\xef\x8c\x84'
GBT__SYMBOLS[cloud]='\001\e[38;5;39m\002\xef\x99\x9e'
GBT__SYMBOLS[coreos]='\001\e[38;5;32m\002\xef\x8c\x85'
GBT__SYMBOLS[darwin]='\001\e[38;5;15m\002\xef\x94\xb4'
GBT__SYMBOLS[debian]='\001\e[38;5;88m\002\xee\x9d\xbd'
GBT__SYMBOLS[devuan]='\001\e[38;5;16m\002\xef\x8c\x87'
GBT__SYMBOLS[docker]='\001\e[38;5;26m\002\xee\x9e\xb0'
GBT__SYMBOLS[elementary]='\001\e[38;5;33m\002\xef\x8c\x89'
GBT__SYMBOLS[fedora]='\001\e[38;5;32m\002\xef\x8c\x8a'
GBT__SYMBOLS[freebsd]='\001\e[38;5;1m\002\xef\x8c\x8c'
GBT__SYMBOLS[gentoo]='\001\e[38;5;62m\002\xef\x8c\x8d'
GBT__SYMBOLS[linux]='\001\e[38;5;15m\002\xef\x85\xbc'
GBT__SYMBOLS[linuxmint]='\001\e[38;5;47m\002\xef\x8c\x8e'
GBT__SYMBOLS[mageia]='\001\e[38;5;24m\002\xef\x8c\x90'
GBT__SYMBOLS[mandriva]='\001\e[38;5;208m\002\xef\x8c\x91'
GBT__SYMBOLS[manjaro]='\001\e[38;5;34m\002\xef\x8c\x92'
GBT__SYMBOLS[nixos]='\001\e[38;5;88m\002\xef\x8c\x93'
GBT__SYMBOLS[opensuse]='\001\e[38;5;113m\002\xef\x8c\x94'
GBT__SYMBOLS[raspbian]='\001\e[38;5;125m\002\xef\x8c\x95'
GBT__SYMBOLS[redhat]='\001\e[38;5;1m\002\xee\x9e\xbb'
GBT__SYMBOLS[sabayon]='\001\e[38;5;255m\002\xef\x8c\x97'
GBT__SYMBOLS[slackware]='\001\e[38;5;63m\002\xef\x8c\x98'
GBT__SYMBOLS[ubuntu]='\001\e[38;5;166m\002\xef\x8c\x9b'
GBT__SYMBOLS[windows]='\001\e[38;5;6m\002\xee\x98\xaa'


# Customize 'which' option for ZSH
[ ${SHELL##*/} = 'zsh' ] && export GBT__WHICH_OPTS='-p'

function gbt__err() {
    echo "$@" >&2
}

function gbt__get_os() {
    local ret

    if [[ ! $(cat /proc/1/sched | head -n 1 | egrep '(init|systemd)') ]]; then
        ret='docker'
    elif [ "$(uname -s)" = 'Linux' ] && [ -e /etc/os-release ]; then
        source /etc/os-release
        ret="$ID"
    else
        ret=$(uname -s)
    fi

    echo $ret | tr '[:upper:]' '[:lower:]'
}

function gbt_docker() {
    local WHICH=$(which $GBT__WHICH_OPTS which 2>/dev/null)
    [ -z $WHICH ] && gbt__err "'which' not found" && return 1
    local DOCKER_BIN=$(which $GBT__WHICH_OPTS docker 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'docker' not found" && return 1

    if [ "$1" != 'shell' ]; then
        $DOCKER_BIN "$@"
    else
        local GBT__CONTAINER_ID="${@: -1}"

        $DOCKER_BIN cp $GBT__CONF $GBT__CONTAINER_ID:$(dirname $GBT__CONF)
        $DOCKER_BIN exec ${@:2:$(($# - 2))} -it $GBT__CONTAINER_ID bash --rcfile $GBT__CONF
        $DOCKER_BIN exec ${@:2:$(($# - 2))} -it $GBT__CONTAINER_ID rm -f $GBT__CONF $GBT__CONF.bash
    fi
}

function gbt_mysql() {
    local WHICH=$(which $GBT__WHICH_OPTS which 2>/dev/null)
    [ -z $WHICH ] && gbt__err "'which' not found" && return 1
    local MYSQL_BIN=$(which $GBT__WHICH_OPTS mysql 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'mysql' not found" && return 1

    $MYSQL_BIN --prompt "$GBT__MYSQL_PS1" "$@"
}

function gbt_su() {
    local WHICH=$(which $GBT__WHICH_OPTS which 2>/dev/null)
    [ -z $WHICH ] && gbt__err "'which' not found" && return 1
    local SU_BIN=$(which $GBT__WHICH_OPTS su 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'su' not found" && return 1

    $SU_BIN -s "$GBT__CONF.bash" "$@"
}

function gbt_sudo() {
    local WHICH=$(which $GBT__WHICH_OPTS which 2>/dev/null)
    [ -z $WHICH ] && gbt__err "'which' not found" && return 1
    local SU_BIN=$(which $GBT__WHICH_OPTS su 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'su' not found" && return 1
    local SUDO_BIN=$(which $GBT__WHICH_OPTS sudo 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'sudo' not found" && return 1

    if [ "$1" != 'su' ]; then
        $SUDO_BIN "$@"
    else
        shift
        $SUDO_BIN $SU_BIN -s "$GBT__CONF.bash" "$@"
    fi
}

function gbt_ssh() {
    local WHICH=$(which $GBT__WHICH_OPTS which 2>/dev/null)
    [ -z $WHICH ] && gbt__err "'which' not found" && return 1
    local SSH_BIN=$(which $GBT__WHICH_OPTS ssh 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'ssh' not found" && return 1

    [ -z $SSH_BIN ] && return 1
    $SSH_BIN -t "$@" "
        cat /etc/motd 2>/dev/null;
        echo \"$(base64 $GBT__CONF | tr -d '\r\n')\" | base64 -d > $GBT__CONF &&
        bash --rcfile $GBT__CONF;
        rm -f $GBT__CONF $GBT__CONF.bash"
}

function gbt_vagrant() {
    local WHICH=$(which $GBT__WHICH_OPTS which 2>/dev/null)
    [ -z $WHICH ] && gbt__err "'which' not found" && return 1
    local VAGRANT_BIN=$(which $GBT__WHICH_OPTS vagrant 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'vagrant' not found" && return 1

    if [ "$1" != 'ssh' ]; then
        $VAGRANT_BIN "$@"
    else
        shift
        $VAGRANT_BIN ssh --command "
            cat /etc/motd 2>/dev/null;
            echo \"$(base64 $GBT__CONF | tr -d '\r\n')\" | base64 -d > $GBT__CONF &&
            bash --rcfile $GBT__CONF;
            rm -f $GBT__CONF $GBT__CONF.bash" "$@"
    fi
}

# Change the Sign depending on the user
if [ "$UID" = '0' ]; then
    export GBT__SIGN='\001\x1b[38;5;1m\002#'
    export GBT__USER="\001\x1b[38;5;9m\002"
else
    export GBT__SIGN='\001\x1b[38;5;10m\002$'
    export GBT__USER="\001\x1b[38;5;11m\002"
fi

# Customize OS icon
export GBT__OS=${GBT__SYMBOLS[$(gbt__get_os)]:=?}

# Create executable that is used as shell in 'su'
if [ ! -e "$GBT__CONF.bash" ]; then
    echo -e "#!/bin/bash\nbash --rcfile $GBT__CONF \"\$@\"" > $GBT__CONF.bash
    chmod +x $GBT__CONF.bash
fi

# Load remote custom profile if it exists
if [ -e ~/.gbt_profile ]; then
    source ~/.gbt_profile
fi

