declare -A GBT__SYMBOLS
GBT__SYMBOLS[amzn]='\001\e[38;5;208m\002'
GBT__SYMBOLS[arch]='\001\e[38;5;25m\002'
GBT__SYMBOLS[archarm]='\001\e[38;5;125m\002'
GBT__SYMBOLS[centos]='\001\e[38;5;27m\002'
GBT__SYMBOLS[coreos]='\001\e[38;5;15m\002'
GBT__SYMBOLS[darwin]='\001\e[38;5;15m\002'
GBT__SYMBOLS[debian]='\001\e[38;5;88m\002'
GBT__SYMBOLS[docker]='\001\e[38;5;26m\002'
GBT__SYMBOLS[elementary]='\001\e[38;5;33m\002'
GBT__SYMBOLS[fedora]='\001\e[38;5;32m\002'
GBT__SYMBOLS[freebsd]='\001\e[38;5;1m\002'
GBT__SYMBOLS[gentoo]='\001\e[38;5;62m\002'
GBT__SYMBOLS[linux]='\001\e[38;5;15m\002'
GBT__SYMBOLS[linuxmint]='\001\e[38;5;47m\002'
GBT__SYMBOLS[mageia]='\001\e[38;5;24m\002'
GBT__SYMBOLS[mandriva]='\001\e[38;5;208m\002'
GBT__SYMBOLS[opensuse]='\001\e[38;5;113m\002'
GBT__SYMBOLS[raspbian]='\001\e[38;5;125m\002'
GBT__SYMBOLS[redhat]='\001\e[38;5;1m\002'
GBT__SYMBOLS[sabayon]='\001\e[38;5;15m\002'
GBT__SYMBOLS[slackware]='\001\e[38;5;15m\002'
GBT__SYMBOLS[ubuntu]='\001\e[38;5;166m\002'

[ ${SHELL##*/} = "zsh" ] && local GBT__WHICH_OPTS='-p'

function gbt__err() { echo "$@" >&2; }

function gbt__get_os() {
    local ret

    if [[ ! $(cat /proc/1/sched | head -n 1 | egrep '(init|systemd)') ]]; then
        ret='docker'
    elif [ "$(uname -s)" = 'Linux' ]; then
        source /etc/os-release
        ret="$ID"
    else
        ret=$(uname -s)
    fi

    echo $ret | tr '[:upper:]' '[:lower:]'
}

function gbt_sudo() {
    local SU_BIN=$(which ${GBT__WHICH_OPTS} su 2>/dev/null)
    [ $? -ne 0 ] &&  gbt__err "'su' not found" && return 1
    local SUDO_BIN=$(which ${GBT__WHICH_OPTS} sudo 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'sudo' not found" && return 1

    if [ "$1" != 'su' ]; then
        $SUDO_BIN $@
    else
        shift
        $SUDO_BIN $SU_BIN -c "bash --rcfile $GBT__CONF" $@
    fi
}

function gbt_su() {
    local SU_BIN=$(which ${GBT__WHICH_OPTS} su 2>/dev/null)
    [ $? -ne 0 ] &&  gbt__err "'su' not found" && return 1

    $SU_BIN -c "bash --rcfile $GBT__CONF" $@
}

function gbt_ssh() {
    local SSH_BIN=$(which ${GBT__WHICH_OPTS} ssh 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'ssh' not found" && return 1

    [ -z $SSH_BIN ] && return 1
    $SSH_BIN -t $@ "
        cat /etc/motd 2>/dev/null;
        echo \"$(base64 $GBT__CONF | tr -d '\r\n')\" | base64 -d > $GBT__CONF &&
        bash --rcfile $GBT__CONF;
        rm -f $GBT__CONF"
}

function gbt_docker() {
    local DOCKER_BIN=$(which ${GBT__WHICH_OPTS} docker 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'docker' not found" && return 1

    if [ "$1" != 'shell' ]; then
        $DOCKER_BIN $@
    else
        local GBT__CONTAINER_ID="$2"

        $DOCKER_BIN cp $GBT__CONF $GBT__CONTAINER_ID:$(dirname $GBT__CONF)
        $DOCKER_BIN exec -it $GBT__CONTAINER_ID /bin/bash --rcfile $GBT__CONF
    fi
}

function gbt_vagrant() {
    local VAGRNAT_BIN=$(which ${GBT__WHICH_OPTS} vagrant 2>/dev/null)
    [ $? -ne 0 ] && gbt__err "'vagrant' not found" && return 1

    if [ "$1" != 'ssh' ]; then
        $VAGRANT_BIN $@
    else
        $VAGRANT_BIN ssh --command "
            cat /etc/motd 2>/dev/null;
            echo \"$(base64 $GBT__CONF | tr -d '\r\n')\" | base64 -d > $GBT__CONF &&
            bash --rcfile $GBT__CONF;
            rm -f $GBT__CONF"
    fi
}

# Change the Sign depending on the user
if [ "$UID" = '0' ]; then
    export GBT__SIGN='\001\x1b[38;5;1m\002#'
    export GBT__USER="\001\x1b[38;5;9m\002"
else
    export GBT__SIGN='\001\x1b[38;5;10m\002$'
    export GBT__USER="\001\x1b[38;5;11m\002"
fi

export GBT__OS=${GBT__SYMBOLS[$(gbt__get_os)]}

